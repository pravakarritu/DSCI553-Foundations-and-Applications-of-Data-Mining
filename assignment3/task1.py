import sys
import time
from pyspark import SparkContext, SparkConf
import itertools
from functools import reduce
import operator
import random
if __name__ == "__main__":
    spark_context = SparkContext.getOrCreate()
    spark_context.setLogLevel("WARN")

    start_time = time.time()
    data = spark_context.textFile(sys.argv[1])
    header = data.first()
    data = data.filter(lambda row: row != header).map(lambda row: row.split(','))
    data = data.map(lambda row: (row[0], row[1]))
    user_id_dict = data.map(lambda row: row[0]).distinct().sortBy(lambda row:row).zipWithIndex().collectAsMap()
    m = len(user_id_dict)
    business_id_dict = data.map(lambda row: row[1]).distinct().sortBy(lambda row:row).zipWithIndex().collectAsMap()
    index_business = {value: key for key, value in business_id_dict.items()}
    indexed_data = data.map(lambda row: (user_id_dict[row[0]], business_id_dict[row[1]]))

    matrix1 = indexed_data.map(lambda row: (row[1], [row[0]])).reduceByKey(operator.add)
    matrix = matrix1.map(lambda row: (row[0], (row[1]))).collectAsMap()

    def jaccard_similarity(val1, val2):
        val1 = matrix[val1]
        val2 = matrix[val2]
        common = len(set(val1) & set(val2))
        total = len(set(val1)) + len(set(val2)) - common
        return common / total

    a=[3116332905216229883, 7423978414343507526, 8569678175096515440, 4681523935195856046, 4655778622108792641, 6411363728547499079, 3233127042114996188, 5189455083204960176, 916149815675258755, 429466287272118190, 5443318324560784116, 367487913479750721, 7396677344562290768, 9148463694819846012, 1619845046518702802, 5190048394774011001, 8442633023959846327, 5999679426208302798, 4630214794777355849, 592465813384984261, 2903648584864656993, 8076810010350124607, 9042220505192613500, 115493271185668217, 7997205915620242454, 5583876415800627272, 8041051829991141467, 4878338705160148804, 2814410554371146102, 6985411881252722697, 4572881285274401381, 7084806413999565201, 1498763701629061271, 2391813357378693822, 6554890727099758608, 1608539787342522049, 4433154096587912917, 8237772666384410750, 8686754868579001694, 8909454034966831855, 5435996859727395391, 5697148410346374861, 6463401184642668332, 8848706372006797969, 4748229523811711699, 6802241142559494329, 3951162266021013088, 7445375278932401174, 501298182506690158, 9162381729983279779, 1118816871148048958, 6981413175970570543, 5309852592768856828, 7809132698820435687, 4956915817012054554, 7525916631544018068, 5910836360643061795, 6656731605353827379, 8948092928196767600, 4845567961977437395, 7538346273685559052, 4823615946639291460, 5747697004688962641, 4523790444338731347, 1031332174824241738, 7334644004021595090, 3302995161143682081, 669898318876099137, 6506074118177751723, 2371255498832618154, 5003558584818191286, 1466722179016908259, 5268793484153612200, 6547910590557232304, 5888931360834684759, 6264119081774069338, 4527680439999432348, 760629033978390405, 4525696773446860744, 4596145748049087134, 6474921852144303868, 3128004963931836794, 1328736602961875355, 5569912446799735906, 298781936550966259, 391350249282443355, 3439562114751261652, 663218122980901010, 5489354625812514793, 6151359396718262826, 3318706218507721609, 5047238380934672483, 668694916544846014, 6932243702455423169, 2843599792725392086, 1542900198596364477, 9077304671513769411, 9038121539871712295, 3146672748269145441, 7109840836681533213, 220399913844767800, 9221874796462166635, 6342712889800879152, 8500687515852988608, 8449803441998762574, 9114273949388248371, 7403956433332092822, 4330916667546336791, 2353278977481170025, 2685429687018762969, 6984987916027790998, 7013246199914037186, 2314306762675072869, 6800879885169617935, 1822613181094825303, 8579964718775359131, 97791071770029322, 8072960419839723876, 5625769552603534879, 1225906095025250583, 2189829263211245851, 2686257035759169086, 3286652701592462739, 6029662666871632289, 1350134414746420087, 5897632904449606676, 2397908966647246645, 4903074516695023195, 8259958230887154303, 7265972535599452610, 4976512543024150106, 4491272960954045948, 2200126355579928151, 3352099712921873583, 6940805196675554312, 7011608102407092613, 735840439043657574, 8348074393468096141, 5805222728636427688, 8031454583841655202, 5789426176294277272, 6281163641921865421, 771288966613946864, 9058602731254565259, 9164693839382370064, 475364760639295358, 4162112802328239970, 6024476365383498235, 7534884687863891717, 6114935965806173625, 6229527757996634186, 5635907283488053806, 2105814474477576487, 9015606346761167668, 4197196457643874037, 8950342193556632356, 3832543060448859532, 4843876508845968091, 2217815121657405910, 5431808984866445206, 8432368145466274944, 2863378324917686824, 1265966747402439495, 8920700547953518572, 7267096151717922356, 387546277628068359, 2020124983232409808, 8683372955507962460, 3101253746929514968, 4556775643327845987, 6283773223235371203, 8564152815040203230, 7077117601442876409, 387766805601366909, 3836656254657175667, 4043784136770118115, 4162851315046311655, 5977258506885366104, 7359233628737282971, 6512768685318452732, 2764371213283099819, 7859945500867100040, 1100183712072407470, 3381663056191359947, 3715884606811022815, 5304745568184789472, 7594568854266330800, 1897715455123476140, 5035353386243292261, 1313526776099643480, 8026749960434949940, 6827794786254321938, 8346447393500978533, 6072595497250183756, 2174216324155667562, 6717029385689730241, 8614436827601457813, 8799216765831801134, 8977839101326141173, 5596746015047624926]
    b=[256196552904733813, 7800171310709888571, 2397946559913159371, 3122944217797532790, 5304231864630530987, 3138487834625060995, 448485442861527716, 1758258259008215601, 3582330479015970610, 3769743466243527948, 1814453695660666006, 4273861616914489038, 6985039619643366688, 7272158641499605882, 3284970015031361944, 7955008093585168461, 8782234576726910518, 3089816997249354602, 4391026424442965019, 4962767568056229314, 1497021195786255700, 161873149755204768, 512847869820763789, 5941709159307611029, 4087735542537590382, 4221270871756347401, 5620491081843602325, 5976755278544077272, 2603531537934062032, 3021917018643168618, 5824124736525828485, 4240520273467432109, 2350648754200360541, 7027076170102592703, 2354269391067537574, 4358970338862776233, 3974783467352194882, 4150391923685557068, 5598891708365837058, 4839308369326727502, 5775620043246545674, 3814825815042662047, 2510757187478741067, 7222392337741421184, 7593492567286767846, 2761902173328285064, 2158258017272280588, 8367380633658664474, 7317525793361624644, 2798105791204505208, 1457675303158364961, 2439414693012958646, 770217552768729669, 6503438210220312838, 8167956855282573232, 8632590921757105829, 3279768635268709041, 6243554084038362796, 2793943300406856365, 7388655344490604133, 6049380544611905162, 1480403419175419747, 6662381583539004378, 1339688342241330071, 3597039151888363339, 7730417714536205948, 3018178918034579225, 7603611622180628260, 477818276078489342, 8078423800312697510, 1878393777891775662, 176669646800335783, 630591657269438884, 9016396553577278964, 169350696831269853, 935446424051371122, 6034581854693546218, 4934725291132649351, 70863325754602578, 2529990566400514285, 8038707109608469545, 7646346442186849443, 4053236378515638579, 9194150239917025313, 1509115526010496091, 977642829561385790, 732338803273271167, 2694469947213271470, 5585745248847764044, 3863024286945341358, 7052060537986175823, 1005441501140860810, 1717450748103930704, 3775376608353506082, 3953270907163190968, 8775794078181936560, 8416564505616557469, 7591424440335150399, 1229378469532948526, 5294203479246051940, 7948598275627867416, 8522936487321638207, 6830109418796619637, 1259041583465268044, 3613197681658315922, 8162577071471518736, 8863204723337541950, 5936992294306686644, 3960750591774276820, 626578143250296647, 2441648109441615111, 1817397179550276090, 7446543245052832845, 5407171898717928077, 6173982593689371612, 1828093967876377274, 509578631055773014, 8484276835972517687, 8587294885675475609, 7463246894692798577, 1105803368482822246, 3506193178020998096, 7109762287326477024, 4834027707583028156, 1346497503162869522, 7450235501295383756, 4596418691925137947, 2303210944089471669, 1062113248780727007, 859959168432241808, 683805244718655761, 6295548479424570374, 4250211521237289550, 9068136593143083798, 6802701662212327850, 2862296384112242959, 2218585337756205233, 3469887508255056031, 7639312591857329776, 4241434443888516524, 1017154041116639711, 4468856940064308414, 2736970154857952911, 985363025252468736, 2217117827024091109, 5864914640086280216, 3343177384989067749, 8318370218064368410, 4103026784691526481, 8849586308999274723, 6327739301569711208, 8608521378548582298, 7971591684821836851, 183639816535961777, 4762671956850489223, 3078721804958286492, 6853845762659677085, 3591645323443254883, 7131207066352097424, 4094973855386407637, 6742224357662842984, 881380296981055478, 6366449727319929881, 1957563550504338773, 6020987440622376643, 625574093572920536, 362680912344810904, 2106638678785967690, 8257759248386873404, 7805611593912323467, 1128332579669012053, 6632933875441047827, 2814529593835788009, 6003531314288065560, 7026347243734523320, 2054631118274762604, 2443037425931932707, 6046003694877306622, 3196575760339147617, 1336390694878803962, 4308395852671073581, 1755813350701430021, 3449052720412163922, 2355033908540779188, 8361913251787977650, 8078674380783710952, 1098376377204826278, 6472932934985628052, 733504047361585796, 2385110243932990295, 4381217604013368412, 6524411572027974196, 558826912359510841, 5542634554531545488, 8676298123143004517, 5766322716303841037, 1990615257339005832, 5439459206567145492, 7325785497020012625, 8307108189273301759]

    def minhash(val):
        sig_list = []
        num_hash = len(a)
        for i in range(num_hash):
            l = []
            for j in val:
                l += [(a[i] * j + b[i]) % m]
            sig_list.append(min(l))
            l = []
        return sig_list

    def bands(val):
        l = []
        for i in range(0, 200 , 2):
            l.append(hash(tuple(val[i:i + 2])))
        new_list=[(i,l[i]) for i in range(len(l))]
        return new_list

    hashing_users = matrix1.map(lambda row: (row[0], minhash(row[1])))
    hashing_users_dict = hashing_users.collectAsMap()
    bands_signatures1 = hashing_users.map(lambda row: (row[0], bands(row[1])))
    bands_signatures = bands_signatures1.collect()
    bands_signatures2=bands_signatures1.flatMap(lambda row:[(tuple(val),[row[0]]) for val in row[1]]).reduceByKey(operator.add)\
        .filter(lambda row: len(row[1])>1).map(lambda row:row[1]).flatMap(lambda row: list(itertools.combinations(row, 2)))


    jaccard_similarity_values = bands_signatures2.map(lambda row: (row[0], row[1], jaccard_similarity(row[0], row[1]))).filter(
        lambda row: row[2] >= 0.5)
    jaccard_similarity_values=jaccard_similarity_values.map(lambda row:(index_business[row[0]],index_business[row[1]],row[2])).distinct().map(lambda row: sorted([row[0],row[1]])+[str(row[2])]).collect()


    def write(jaccard_similarity_values):
        jaccard_similarity_values=sorted(jaccard_similarity_values)
        for i in jaccard_similarity_values:
            file.write(",".join(i)+"\n")
    file = open(sys.argv[2], 'w')
    file.write('business_id_1, business_id_2, similarity' + '\n')
    write(jaccard_similarity_values)
    file.close()
    end_time=time.time()
    print("Duration:{}".format(end_time-start_time))
